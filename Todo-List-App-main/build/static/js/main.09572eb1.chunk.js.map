{"version":3,"sources":["components/todoreact/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputdata","setInputData","lists","localStorage","getItem","JSON","parse","getLocalData","items","setItems","isEditItem","setIsEditItem","toggleButton","setToggleButton","addItem","map","curElem","id","name","myNewInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onChange","event","target","onClick","index","item_todo_edited","find","editItem","updatedItems","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6OAmIeA,EArHF,WACX,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAZP,WACnB,IAAMG,EAAQC,aAAaC,QAAQ,cAEnC,OAAIF,EACKG,KAAKC,MAAMJ,GAEX,GAM0BK,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAwCZ,oBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KAGMC,EAAU,WACd,GAAKd,EAEE,GAAIA,GAAaY,EACtBH,EACED,EAAMO,KAAI,SAACC,GACT,OAAIA,EAAQC,KAAOP,EACV,2BAAKM,GAAZ,IAAqBE,KAAMlB,IAEtBgB,MAIXf,EAAa,IACbU,EAAc,MACdE,GAAgB,OACX,CACL,IAAMM,EAAiB,CACrBF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMlB,GAERS,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBlB,EAAa,SApBbsB,MAAM,sBAoDV,OAJAC,qBAAU,WACRrB,aAAasB,QAAQ,aAAcpB,KAAKqB,UAAUlB,MACjD,CAACA,IAGF,mCACE,qBAAKmB,UAAU,WAAf,SACE,sBAAKA,UAAU,YAAf,UACE,mCACE,qBAAKC,IAAI,oBAAoBC,IAAI,aACjC,sEAEF,sBAAKF,UAAU,WAAf,UACE,uBACEG,KAAK,OACLC,YAAY,kBACZJ,UAAU,eACVK,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAWjC,EAAaiC,EAAMC,OAAOH,UAEhDpB,EACC,mBAAGe,UAAU,sBAAsBS,QAAStB,IAE5C,mBAAGa,UAAU,qBAAqBS,QAAStB,OAI/C,qBAAKa,UAAU,YAAf,SACGnB,EAAMO,KAAI,SAACC,GACV,OACE,sBAAKW,UAAU,WAAf,UACE,6BAAKX,EAAQE,OACb,sBAAKS,UAAU,WAAf,UACE,mBACEA,UAAU,sBACVS,QAAS,kBA1DZ,SAACC,GAChB,IAAMC,EAAmB9B,EAAM+B,MAAK,SAACvB,GACnC,OAAOA,EAAQC,KAAOoB,KAExBpC,EAAaqC,EAAiBpB,MAC9BP,EAAc0B,GACdxB,GAAgB,GAoDiB2B,CAASxB,EAAQC,OAClC,mBACEU,UAAU,2BACVS,QAAS,kBAnDV,SAACC,GAClB,IAAMI,EAAejC,EAAMkC,QAAO,SAAC1B,GACjC,OAAOA,EAAQC,KAAOoB,KAExB5B,EAASgC,GA+CwBE,CAAW3B,EAAQC,YARTD,EAAQC,SAgB7C,qBAAKU,UAAU,YAAf,SACE,wBACEA,UAAU,eACV,oBAAkB,aAClBS,QAvDM,WAChB3B,EAAS,KAmDD,SAIE,2DC9GCmC,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.09572eb1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\n\n// get the localStorage data back\nconst getLocalData = () => {\n  const lists = localStorage.getItem(\"mytodolist\");\n\n  if (lists) {\n    return JSON.parse(lists);\n  } else {\n    return [];\n  }\n};\n\nconst Todo = () => {\n  const [inputdata, setInputData] = useState(\"\");\n  const [items, setItems] = useState(getLocalData());\n  const [isEditItem, setIsEditItem] = useState(\"\");\n  const [toggleButton, setToggleButton] = useState(false);\n\n  // add the items fucnction\n  const addItem = () => {\n    if (!inputdata) {\n      alert(\"plz fill the data\");\n    } else if (inputdata && toggleButton) {\n      setItems(\n        items.map((curElem) => {\n          if (curElem.id === isEditItem) {\n            return { ...curElem, name: inputdata };\n          }\n          return curElem;\n        })\n      );\n\n      setInputData(\"\");\n      setIsEditItem(null);\n      setToggleButton(false);\n    } else {\n      const myNewInputData = {\n        id: new Date().getTime().toString(),\n        name: inputdata,\n      };\n      setItems([...items, myNewInputData]);\n      setInputData(\"\");\n    }\n  };\n\n  //edit the items\n  const editItem = (index) => {\n    const item_todo_edited = items.find((curElem) => {\n      return curElem.id === index;\n    });\n    setInputData(item_todo_edited.name);\n    setIsEditItem(index);\n    setToggleButton(true);\n  };\n\n  // how to delete items section\n  const deleteItem = (index) => {\n    const updatedItems = items.filter((curElem) => {\n      return curElem.id !== index;\n    });\n    setItems(updatedItems);\n  };\n\n  // remove all the elements\n  const removeAll = () => {\n    setItems([]);\n  };\n\n  // adding localStorage\n  useEffect(() => {\n    localStorage.setItem(\"mytodolist\", JSON.stringify(items));\n  }, [items]);\n\n  return (\n    <>\n      <div className=\"main-div\">\n        <div className=\"child-div\">\n          <figure>\n            <img src=\"./images/todo.svg\" alt=\"todologo\" />\n            <figcaption>Add Your List Here ✌</figcaption>\n          </figure>\n          <div className=\"addItems\">\n            <input\n              type=\"text\"\n              placeholder=\"✍ Add Item\"\n              className=\"form-control\"\n              value={inputdata}\n              onChange={(event) => setInputData(event.target.value)}\n            />\n            {toggleButton ? (\n              <i className=\"far fa-edit add-btn\" onClick={addItem}></i>\n            ) : (\n              <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>\n            )}\n          </div>\n          {/* show our items  */}\n          <div className=\"showItems\">\n            {items.map((curElem) => {\n              return (\n                <div className=\"eachItem\" key={curElem.id}>\n                  <h3>{curElem.name}</h3>\n                  <div className=\"todo-btn\">\n                    <i\n                      className=\"far fa-edit add-btn\"\n                      onClick={() => editItem(curElem.id)}></i>\n                    <i\n                      className=\"far fa-trash-alt add-btn\"\n                      onClick={() => deleteItem(curElem.id)}></i>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* rmeove all button  */}\n          <div className=\"showItems\">\n            <button\n              className=\"btn effect04\"\n              data-sm-link-text=\"Remove All\"\n              onClick={removeAll}>\n              <span> CHECK LIST</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./components/todoreact/todo\";\n// import Temp from \"./components/weather/temp\";\n\nconst App = () => {\n  return (\n    <>\n      <Todo />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}